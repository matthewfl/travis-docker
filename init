#!/bin/sh
echo '[booting]'
set -e -x  # fail early
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


mount -t tmpfs none /tmp
mount -t tmpfs none /var/run
#mount -t hostfs -o $LOGDIR none /var/log
mount -t tmpfs non /var/log
mount -t tmpfs none /var/lib/docker
mount -t proc proc /proc
mkdir /dev/pts
mount -t devpts devpts /dev/pts
mkdir /dev/shm
mount -t tmpfs none /dev/shm
mount -t sysfs sysfs /sys
mount -t tmpfs none /sys/fs/cgroup
mkdir /tmp/host
mount -t hostfs -o /tmp/travis-docker/ none /tmp/host
for SUBSYS in memory devices cpuset
do
		mkdir /sys/fs/cgroup/$SUBSYS
		mount -t cgroup -o $SUBSYS none /sys/fs/cgroup/$SUBSYS
done
echo 1 > /proc/sys/net/ipv4/ip_forward
echo 0 > /proc/sys/kernel/printk
ip addr add 127.0.0.1 dev lo
ip link set lo up
ip addr add 10.0.2.15/24 dev eth0
ip link set eth0 up
#echo 'nameserver 10.0.2.3' > /etc/resolv.conf
ip route add default via 10.0.2.2

/tmp/host/docker -d -H=tcp://0.0.0.0:2375

#/tmp/travis-docker/docker -d -H=tcp://0.0.0.0:9000

#bash

#ip addr add 10.1.1.1/24 dev eth0
#ip link set eth0 up
#ip route add default via 10.1.1.254
# This is to handle when /etc/resolv.conf -> /run/resolvconf/resolv.conf
# [ -L /etc/resolv.conf ] && {
# 	mkdir -p $(dirname $(readlink --canonicalize-missing /etc/resolv.conf))
# 	[ -f /etc/resolv.conf ] || {
# 		cat /var/log/resolv.conf > /etc/resolv.conf
# 	}
# }
# [ -f /var/log/output ] && {
# 	exec >>/var/log/output
# 	exec 2>>/var/log/output
# }
# bash
#docker -d -H=tcp://0.0.0.0:9000
#sleep 2h
#sh /var/log/cmd
# echo $? >/var/log/status
# This will make sure that the main "tail" process had the opportunity
# to display everything before being killed by UML misbehavior.
#sleep 1
